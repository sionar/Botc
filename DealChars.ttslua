--[[
DealChars
Made by Sionar
--]]


------------------Constants
VERSION = '1.8.4'
COLORS_RGB = {White = {1,1,1}, Brown = {113/255,59/255,23/255}, Red = {219/255,26/255,24/255}, Orange = {244/255,100/255,29/255}, Yellow = {231/255,229/255,44/255}, Green = {49/255,179/255,43/255}, Teal = {33/255,177/255,155/255}, Blue = {31/255,136/255,255/255}, Purple = {160/255,32/255,240/255}, Pink = {245/255,112/255,206/255}, Magenta = {255/255,0/255,127/255}, Lavender = {150/255,123/255,182/255}, Navy = {99/255,109/255,212/255}, Cyan = {73/255,213/255,253/255}, Mint = {137/255,195/255,129/255}, Lime = {184/255,241/255,97/255}, Peach = {241/255,212/255,162/255}, Coral = {226/255,154/255,138/255}, Maroon = {128/255,0,0}, Silver = {190/255,190/255,190/255},}
COLORS_PREVIEW = {White = {1,1,1,0.25}, Brown = {113/255,59/255,23/255,0.25}, Red = {219/255,26/255,24/255,0.25}, Orange = {244/255,100/255,29/255,0.25}, Yellow = {231/255,229/255,44/255,0.25}, Green = {49/255,179/255,43/255,0.25}, Teal = {33/255,177/255,155/255,0.25}, Blue = {31/255,136/255,255/255,0.25}, Purple = {160/255,32/255,240/255,0.25}, Pink = {245/255,112/255,206/255,0.25}, Magenta = {255/255,0/255,127/255,0.25}, Lavender = {150/255,123/255,182/255,0.25}, Navy = {99/255,109/255,212/255,0.25}, Cyan = {73/255,213/255,253/255,0.25}, Mint = {137/255,195/255,129/255,0.25}, Lime = {184/255,241/255,97/255,0.25}, Peach = {241/255,212/255,162/255,0.25}, Coral = {226/255,154/255,138/255,0.25}, Maroon = {128/255,0,0,0.25}, Silver = {190/255,190/255,190/255,0.25},}

COLORS_ALL = {'White', 'Brown', 'Red', 'Orange', 'Yellow', 'Green', 'Teal', 'Blue', 'Purple', 'Pink', 'Magenta', 'Lavender', 'Navy', 'Cyan', 'Mint', 'Lime', 'Peach', 'Coral', 'Maroon', 'Silver'}
BUTTON_COLOR = {0,0,0}
BUTTON_FONT_COLOR = {1,1,1}

#include GUIDs.ttslua
#include Data.ttslua


------------------Variables
objects = {}
autoBluff = false
autoTint = true
autoReminderTint = true
previewOn = true
previewTimerId = nil
previewChars = {}
previewObjs = {}
players = {}


------------------Functions
function onLoad(saveString)
    if not (saveString == '') then
        local save = JSON.decode(saveString)
        autoBluff = save['b']
        autoTint = save['t']
        autoReminderTint = save['r']
        previewOn = save['p']
    end
    refreshButtons()
    assignObjects()
    TABLE_OFFSET = Global.getVar('TABLE_OFFSET')
    STORYTELLER_TABLE_DIST = Global.getVar('STORYTELLER_TABLE_DIST')
    if previewOn then
        previewTimerId = Wait.time(generatePreview, 2, -1)
    end
end

function onSave()
    local save = {}
    save['b'] = autoBluff
    save['t'] = autoTint
    save['r'] = autoReminderTint
    save['p'] = previewOn
    local saveString = JSON.encode(save)
    return saveString
end

function assignObjects()
    objects.townSquareGen = getObjectFromGUID(TOWN_SQUARE_GUID)
    objects.nightHelper = getObjectFromGUID(NIGHT_HELPER_GUID)
    objects.charSetup = getObjectFromGUID(CHAR_SETUP_GUID)
    objects.storageBag = getObjectFromGUID(STORAGE_BAG_GUID)
end

function radius(rad, angle, height)
    return {rad*math.sin(angle*math.pi/180), height, rad*math.cos(angle*math.pi/180) + TABLE_OFFSET}
end

function dealToPlayers(clickedObject, playerColor)
    if playerColor ~= 'Black' and not debug then
        return
    end
    local bagObjs = self.getObjects()
    for k,v in pairs(bagObjs) do
        if v.name == 'Drunk' then
            Player['Black'].broadcast('Error: Remove the Drunk token from the bag before dealing the character tokens.', {1,0,0})
            return
        elseif v.name == 'Marionette' then
            Player['Black'].broadcast('Error: Remove the Marionette token from the bag before dealing the character tokens.', {1,0,0})
            return
        elseif v.name == 'Patient Zero' then
            Player['Black'].broadcast('Error: Remove the Patient Zero token from the bag before dealing the character tokens.', {1,0,0})
            return
        end
    end

    local debug = Global.getVar('DEBUG')
    local tableSize = Global.getVar('tableSize')
    local colors = Global.getTable('colors')
    local angle = Global.getTable('angle')
    local allPlayers = Player.getPlayers()
    local players = Global.call('updatePlayers')
    local numPlayers = Global.call('getNumPlayers')
    local storytellerMode = Global.getVar('storytellerMode')
    local params, obj, char
    local chars = {}
    local allObjs = getAllObjects()
    local tokenBag, tokenBagTable, townsfolkBag
    local posTable = {}
    local size, takeIndex
    local rad = tableSize * 0.4 + 6

    for k,v in pairs(colors) do
        posTable[v] = radius(rad, angle[v], 1.1)
        posTable[v][3] = posTable[v][3] + STORYTELLER_TABLE_DIST
    end

    for k,v in pairs(allObjs) do
        if string.match(v.getName(), ': Reminder Tokens') then
            tokenBag = v
            break
        end
    end

    if self.getQuantity() == 0 then
        Player['Black'].print('Error: No character tokens in the bag.', {1,0,0})
        return
    end


    if numPlayers > 1 and numPlayers ~= self.getQuantity() and not debug then
        Player['Black'].print('Error: The number of character tokens in the bag does not match the number of players seated.', {1,0,0})
        return
    end

    for k,v in pairs(colors) do
        if players[v] ~= nil or debug or #allPlayers == 1 and self.getQuantity() > 0 then
            params = {
                callback_function =  function(obj) take_callback(obj, v) end,
                position = posTable[v],
                rotation = {0, 0, 0}
            }
            obj = self.takeObject(params)
            if obj then
                char = obj.getName()
                chars[v] = char

                tokenBagTable = tokenBag.getObjects()
                size = tokenBag.getQuantity()
                for j = size,1,-1 do
                    if tokenBagTable[j].name == char then
                        params = {
                            index = j-1,
                            callback_function =  function(obj) takeReminder_callback(obj, v) end,
                            position = posTable[v],
                            rotation = {0, 0, 0}}
                        params.position[2] = params.position[2] + 1
                        tokenBag.takeObject(params)
                    end
                end
                if not debug and #allPlayers ~= 1 then
                    players[v].print('Your character is ' .. char..'!')
                end
            end
        end
    end
    if autoBluff then
        for k,v in pairs(allObjs) do
            if string.match(v.getName(), ': Townsfolk') then
                townsfolkBag = v
                break
            end
        end
        if townsfolkBag ~= nil and townsfolkBag.getQuantity() >= 3 then
            townsfolkBag.shuffle()
            townsfolkBag.takeObject({position = {-4,1.1,STORYTELLER_TABLE_DIST + TABLE_OFFSET}, rotation = {0,0,0}})
            townsfolkBag.takeObject({position = {0,1.1,STORYTELLER_TABLE_DIST + TABLE_OFFSET}, rotation = {0,0,0}})
            townsfolkBag.takeObject({position = {4,1.1,STORYTELLER_TABLE_DIST + TABLE_OFFSET}, rotation = {0,0,0}})
        end
    end

    Global.setTable('chars', chars)
    Global.call('refreshUI')
    Global.call('checkSeatedPlayers')
    Global.setVar('autoTint', autoTint)
    Global.setVar('started', true)

    if storytellerMode and objects.townSquareGen ~= nil then
        objects.townSquareGen.call('generateGrimNames')
    end

    if objects.nightHelper ~= nil then
        objects.nightHelper.call('importCall')
    end

    if objects.charSetup ~= nil and objects.storageBag ~= nil then
        objects.storageBag.putObject(objects.charSetup)
    end
    destroyPreviewObjects()
    Wait.stop(previewTimerId)
    Wait.time(function () objects.storageBag.putObject(self) end, 2)
end

function take_callback(object_spawned, color)
    if autoTint then
        object_spawned.setColorTint(COLORS_RGB[color])
    end
    object_spawned.setLock(true)
end

function takeReminder_callback(object_spawned, color)
    if autoReminderTint then
        object_spawned.setColorTint(COLORS_RGB[color])
    end
end

function toggleTint(clickedObject, playerColor)
    if playerColor ~= 'Black' then
        return
    end
    autoTint = not autoTint
    if previewOn then
        previewChars = {}
        generatePreview()
    end
    refreshButtons()
end

function toggleReminderTint(clickedObject, playerColor)
    if playerColor ~= 'Black' then
        return
    end
    autoReminderTint = not autoReminderTint
    refreshButtons()
end

function toggleBluff(clickedObject, playerColor)
    if playerColor ~= 'Black' then
        return
    end
    autoBluff = not autoBluff
    refreshButtons()
end

function togglePreview(clickedObject, playerColor)
    if playerColor ~= 'Black' then
        return
    end
    previewOn = not previewOn
    refreshButtons()
    if previewOn then
        generatePreview()
        previewTimerId = Wait.time(generatePreview, 2, -1)
    else
        if previewTimerId ~= nil then
            Wait.stop(previewTimerId)
        end
        destroyPreviewObjects()
        previewChars = {}
    end
end

function destroyPreviewObjects()
    for k,v in pairs(previewObjs) do
        v.destruct()
    end
    previewObjs = {}
end

function onObjectRandomize(object, playerColor)
    if object ~= self then
        return
    end
    if previewOn then
        generatePreview()
    end
end

function checkPreviewRefresh()
    local refreshNeeded = false
    local newPreviewChars = {}
    local objs = self.getObjects()
    for i,v in ipairs(objs) do
        table.insert(newPreviewChars, 1, v.name)
    end
    if #newPreviewChars == #previewChars then
        for i,v in ipairs(previewChars) do
            if newPreviewChars[i] ~= previewChars[i] then
                refreshNeeded = true
            end
        end
    else
        refreshNeeded = true
    end
    previewChars = newPreviewChars
    return refreshNeeded
end

function generatePreview()
    if not previewOn then
        return
    end

    local refreshNeeded = checkPreviewRefresh()
    if not refreshNeeded then
        return
    end
    self.clearButtons()
    refreshButtons()

    local colors = Global.getTable('colors')
    local angle = Global.getTable('angle')
    local tableSize = Global.getVar('tableSize')
    local globalPlayers = Global.call('updatePlayers')
    local numPlayers = Global.call('getNumPlayers')
    local rad = tableSize * 0.4 + 6
    local previewPos = {}
    local namePos = {}
    local seatedColors = {}
    players = {}
    for k,v in pairs(globalPlayers) do
        players[k] = v
    end
    destroyPreviewObjects()
    for k,v in pairs(colors) do
        previewPos[v] = radius(rad, angle[v], 1.1)
        previewPos[v][3] = previewPos[v][3] + STORYTELLER_TABLE_DIST
    end

    if numPlayers <= 1 then
        seatedColors = colors
        numPlayers = #colors
    else
        for k,v in pairs(COLORS_ALL) do
            if players[v] ~= nil then
                table.insert(seatedColors, v)
            end
        end
    end


    local params
    for i = 1,numPlayers do
        spawnToken(previewChars[i], seatedColors[i], previewPos[seatedColors[i]])
    end
end

function spawnToken(character, color, pos)
    if character == nil then
        return
    end

    local obj
    local params = {
        type = "Custom_Token",
        position = pos,
        sound = false,
        snap_to_grid = false,
        callback_function = function(obj) spawnTokenCB(obj, color) end
    }

    local customParams = {
        image = DECAL_URLS[character],
        thickness = 0.2,
        merge_distance = 25,
        stackable = false
    }
    obj = spawnObject(params)
    obj.setCustomObject(customParams)
end

function spawnTokenCB(obj, color)
    if autoTint then
        obj.setColorTint(COLORS_PREVIEW[color])
    else
        obj.setColorTint({1,1,1,0.25})
    end
    obj.setLock(true)
    obj.interactable = false
    obj.tooltip = false
    table.insert(previewObjs,obj)
    obj.setInvisibleTo({'White', 'Brown', 'Red', 'Orange', 'Yellow', 'Green', 'Teal', 'Blue', 'Purple', 'Pink', 'Grey'})
    if players[color] ~= nil then
        local params = {click_function = 'nil', function_owner = self, position = {0,0,-2}, width = 0, height = 0, font_size = 300, font_color = {1,1,1}, label = players[color].steam_name}
        obj.createButton(params)
    end
end

function refreshButtons()
    self.clearButtons()

    local params
    params = {click_function = 'togglePreview', function_owner = self, position = {-1.1, 0.4, -3.7}, scale = {0.5, 0.5, 0.5}, width = 2000, height = 1000, font_size = 400, color = BUTTON_COLOR, font_color = BUTTON_FONT_COLOR,}
    if previewOn then
        params.label = 'Preview\n[1E87FF]ON'
        params.tooltip = 'Click to disable the preview of the Grimoire for setup.'
    else
        params.label = 'Preview\n[DA1917]OFF'
        params.tooltip = 'Click to enable the preview of the Grimoire for setup.'
    end
    self.createButton(params)

    local params
    params = {click_function = 'toggleBluff', function_owner = self, position = {1.1, 0.4, -3.7}, scale = {0.5, 0.5, 0.5}, width = 2000, height = 1000, font_size = 400, color = BUTTON_COLOR, font_color = BUTTON_FONT_COLOR,}
    if autoBluff then
        params.label = 'Autobluff\n[1E87FF]ON'
        params.tooltip = 'Click to disable automatically grabbing three random bluffs for the Demon.'
    else
        params.label = 'Autobluff\n[DA1917]OFF'
        params.tooltip = 'Click to enable automatically grabbing three random bluffs for the Demon.'
    end
    self.createButton(params)


    params = {click_function = 'toggleTint', function_owner = self, position = {-1.1, 0.4, -2.5}, scale = {0.5, 0.5, 0.5}, width = 2000, height = 1000, font_size = 300, color = BUTTON_COLOR, font_color = BUTTON_FONT_COLOR,}
    if autoTint then
        params.label = 'Autotint\nCharacters\n[1E87FF]ON'
        params.tooltip = 'Click to disable auto-tinting of the Character Tokens.'
    else
        params.label = 'Autotint\nCharacters\n[DA1917]OFF'
        params.tooltip = 'Click to enable auto-tinting of the Character Tokens.'
    end
    self.createButton(params)



    params = {click_function = 'toggleReminderTint', function_owner = self, position = {1.1, 0.4, -2.5}, scale = {0.5, 0.5, 0.5}, width = 2000, height = 1000, font_size = 300, color = BUTTON_COLOR, font_color = BUTTON_FONT_COLOR,}
    if autoReminderTint then
        params.label = 'Autotint\nReminders\n[1E87FF]ON'
        params.tooltip = 'Click to disable automatically tinting the reminder tokens'
    else
        params.label = 'Autotint\nReminders\n[DA1917]OFF'
        params.tooltip = 'Click to enable automatically tinting the reminder tokens'
    end
    self.createButton(params)

    params = {click_function = 'dealToPlayers', function_owner = self, label = 'Deal', tooltip = 'This button will deal the characters in the order inside the bag.\n[aaaaaa](The first character will go to White, then Brown, ... if those players are seated.',
    position = {0, 0.4, 2.5}, scale = {0.5, 0.5, 0.5}, width = 2000, height = 1000, font_size = 800, color = BUTTON_COLOR, font_color = BUTTON_FONT_COLOR,}
    self.createButton(params)
end
